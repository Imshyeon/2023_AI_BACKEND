set FLASK_APP=login
set FLASK_ENV=development
flask run

flask --app=login run


1. 데이터베이스 및 구성파일
    -data / config.py   -> 구성, 환경설정 파일_세션 사용하기 위한 비밀 키 생성(import os 혹은 import secrets), db path
            create_db.py    -> db, table 생성 코드
            users.db

2. 웹 어플리케이션 생성
     -login / database.py => 현재까지 2개의 폴더(data,login)와 3개의 파일(config,create_db,database.py)


    2-1. 데이터베이스 모듈
        database.py 작성 : from flask import current_app(환경설정), g.db=데이터베이스 경로 할당 => current_app : data폴더에 있던 애들을 database에서 사용할거야.
            -데이터베이스 연결, 닫기 (current_app)
    2-2. 로그인 계정 가입 과정
        __init__.py 추가  => 웹 어플리케이션 생성 create_app()
        패스 지정확인(환경설정파일의 config.py), cmd -> flask --app=login run (--app = 모듈이름)

3. Blueprint
    - 모듈을 그룹화시키는 클래스(기능별로 모듈을 나눴다) => 라우터들을 분할했다! => 가입, 로그인, 로그아웃 기능과 메인 기능을 분리
    - Blueprint('별칭 or 함수이름, url_for로 전달할 수 있는 이름들..', __name__, ,,)
        ex. Blueprint('two.member_index') => 함수이름이거나 라우터에서 지정한 이름이거나.. ulr_for에 들어갈 수있는 이름이어야 함.

4. 계정 가입 과정 user.py 사용자 신규 등록
    4-1. 라우팅
        @bp.route('/signup') // @bp.route('/register', methods=('GET', 'POST'))
           => __init__.py가 있는 곳(login)에 templates,static가 있어야하고 , root(F_web02)에 app.py가 있으면 templates,static도 같은 곳에 위치해야한다.
              진입점을 생각하면 좀 더 쉽다! (=진입점과 같은 위치에 templates와 static을 만들자.)
        get_flashed_messages() / flash() => 세션메시지 관리(약간 일종의 캐시를 생각하면 된다..)
            : flash()안의 메시지를 사용자에게 보여주고싶으면 get_flashed_messages()를 이용

    4-2. 템플릿
        login / templates

    4-3. 동작확인
        127.0.0.1:5000/signup으로 해봤다.
        127.0.0.1:5000/register
        flash 확인 => 같은 아이디를 줘서 signup 하면 이미 있다고 뜬다.

5. 로그인 : user.py에 로그인, 로그아웃 / 로그인 설정 확인
    5-1. 라우팅
        @bp.route('/login') -> @bp.route('/member') -> @bp.route('/logout')
        @bp.route('/auth') -> 로그인 설정확인을 해준다.(내부호출용)

    5-2. 템플릿
    5-3. 동작확인
        127.0.0.1:5000/login -> 계정은 맞지만 암호는 다르게.. 없는 계정.. -> flash 출력
        127.0.0.1:5000/login -> 계정, 암호는 정확하게 -> /auth : session['username'] -> /member => session['username']

6. 세션 만료
    6-1. session.clear() : session안 변수 삭제
    6-1. https://flask.palletsprojects.com/en/2.3.x/api/#sessions -> permanent=True : 기본 31일 동안 session이 살아있음
                                                                     permanent_session_lifetime으로 설정.. but 위험하다
         => session.permanent = True
            app.PERMANENT_SESSION_LIFETIME = timedelta(time)

    flask docs -> quickstart -> sessions, message flashing, logging
               -> API -> sessions, session interface, configuration

