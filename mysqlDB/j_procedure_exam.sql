-- 10 -자신의 관리자보다 먼저 입사한 모든 사원의 이름 및 입사일을 해당
 -- 관리자의 이름 및입사일과 함게 표시하고 열 이름을 각각 
-- EMPLOYEE,EMPHIREDATE,MANAGER,MGRHIREDATE로 저장한다.
CALL GET_EXAM10(); -- => 결과를 EXAM10 VIEW로 생성되게 한다.
SELECT * FROM EXAM10_VIEW;
/*
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_EXAM10`()
BEGIN
	CREATE OR REPLACE VIEW EXAM10_VIEW AS
	SELECT E.ENAME AS EMPLOYEE, E.HIREDATE AS EMPHIREDATE, M.ENAME AS MANAGER, M.HIREDATE AS MGRHIREDATE 
    FROM EMP E JOIN EMP M ON (E.MGR = M.EMPNO)
    WHERE E.HIREDATE < M.HIREDATE;
END
*/

/*
SOL)

CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_EXAM10`()
BEGIN
	CREATE OR REPLACE VIEW EXAM10_VIEW AS
    SELECT EM.ENAME AS 'EMPLOYEE', EM.HIREDATE AS 'EMPHIREDATE', MG.ENAME AS 'MANAGER', MG.HIREDATE AS 'MGRHIREDATE'
	FROM EMP EM LEFT OUTER JOIN EMP MG  ON (EM.MGR = MG.EMPNO)
	WHERE MG.HIREDATE > EM.HIREDATE;
END

*/


 -- 11 해당 부서의 모든 사원에 대한 부서 이름, 위치, 사원 수 및 평균 급여를
 -- 표시하는 정의를 작성한다. 
-- 열 이름을 각각 DNAME,LOC,NUMBER OF PEOPLE,SALARY로 한다.
SELECT DNAME, LOC, COUNT(EMPNO) AS 'NUMBER OF PEOPLE', ROUND(AVG(SAL),1) AS SALARY
							  FROM EMP RIGHT JOIN DEPT USING(DEPTNO)
                              GROUP BY DNAME, LOC;
                              
CALL GET_EXAM11(); -- => SELESCT * FROM EXAM11; 임시 테이블 결과 출력
SELECT * FROM EXAM11;
/*
SOL)

CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_EXAM11`()
BEGIN
	DECLARE done INT DEFAULT FALSE;
    DECLARE V_DNAME VARCHAR(50);
    DECLARE V_LOC VARCHAR(50);
    DECLARE V_NOP INT;
    DECLARE V_SAL DECIMAL(10,2);
    DECLARE CUR_11 CURSOR FOR SELECT DNAME, LOC, COUNT(EMPNO) AS 'NUMBER OF PEOPLE', ROUND(AVG(SAL),1) AS SALARY
							  FROM EMP RIGHT JOIN DEPT USING(DEPTNO)
                              GROUP BY DNAME, LOC;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    DROP TEMPORARY TABLE IF EXISTS EXAM11;
    CREATE TEMPORARY TABLE EXAM11(
		DNAME VARCHAR(50), LOC VARCHAR(50), NOP INT, SAL DECIMAL(10,1)
    );
    
    OPEN CUR_11;
    READ_LOOP: LOOP
		FETCH CUR_11 INTO V_DNAME,V_LOC,V_NOP,V_SAL;
        IF done THEN
			LEAVE READ_LOOP;
		END IF;
        INSERT INTO EXAM11(DNAME,LOC,NOP,SAL) VALUES(V_DNAME, V_LOC, V_NOP, V_SAL);
    END LOOP;
    CLOSE CUR_11;
END
*/

 -- 12. 해당(소속) 부서 직원의 평균 봉급보다 많은 봉급를 받는 모든 직원의 이름, 부서 이름 및 직업을 출력 해보자. 
CALL GET_EXAM12(); -- => 출력하자.
CALL GET_EXAM12_2(); 
/*
SOL)

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_exam12`()
BEGIN
    SELECT ENAME, DNAME, JOB
	FROM Emp
	INNER JOIN DEPT USING(DEPTNO)
	WHERE sal > (SELECT AVG(sal) FROM Emp WHERE dept.deptno = Emp.deptno); 
END
*/